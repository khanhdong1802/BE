const express = require("express");
const router = express.Router();
const argon2 = require("argon2");
const jwt = require("jsonwebtoken");
const Income = require("../models/Income");
const Withdraw = require("../models/Withdraw");
const Expense = require("../models/Expense");
const User = require("../models/User");

// @route   POST /api/auth/register
// @desc    Register a new user
// @access  Public
router.post("/register", async (req, res) => {
  const { name, email, password } = req.body;

  // Ki·ªÉm tra ƒë·∫ßu v√†o
  if (!name || !email || !password) {
    return res
      .status(400)
      .json({ success: false, message: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin" });
  }

  try {
    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res
        .status(400)
        .json({ success: false, message: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng" });
    }

    // M√£ h√≥a m·∫≠t kh·∫©u v·ªõi argon2
    const hashedPassword = await argon2.hash(password);

    // T·∫°o ng∆∞·ªùi d√πng m·ªõi
    const newUser = new User({
      name,
      email,
      password: hashedPassword,
    });

    await newUser.save();
    // T·∫°o token JWT
    const accessToken = jwt.sign(
      { userId: newUser._id },
      process.env.ACCESS_TOKEN_SECRET
    );
    res
      .status(201)
      .json({ success: true, message: "ƒêƒÉng k√Ω th√†nh c√¥ng", accessToken });
  } catch (err) {
    console.error(err.message);
    res.status(500).json({ success: false, message: "L·ªói m√°y ch·ªß" });
  }
});

// @route   POST /api/auth/login
// @desc    Login user
// @access  Public
router.post("/login", async (req, res) => {
  const { email, password } = req.body;

  if (!email || !password) {
    return res
      .status(400)
      .json({ success: false, message: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin" });
  }

  try {
    const user = await User.findOne({ email });
    if (!user) {
      return res
        .status(400)
        .json({ success: false, message: "Email kh√¥ng ƒë√∫ng" });
    }

    const passwordValid = await argon2.verify(user.password, password);
    if (!passwordValid) {
      return res
        .status(400)
        .json({ success: false, message: "M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng" });
    }

    const accessToken = jwt.sign(
      { userId: user._id },
      process.env.ACCESS_TOKEN_SECRET
    );

    // L∆∞u th√¥ng tin ng∆∞·ªùi d√πng (name, email) v√†o localStorage trong frontend
    res.status(200).json({
      success: true,
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
      accessToken,
      user: {
        _id: user._id,
        email: user.email,
        name: user.name, // Ch·∫Øc ch·∫Øn r·∫±ng b·∫°n truy·ªÅn name c√πng email
      },
    });
  } catch (err) {
    console.error(err.message);
    res.status(500).json({ success: false, message: "L·ªói m√°y ch·ªß" });
  }
});

// ========================
// POST /api/income
// ========================
router.post("/Income", async (req, res) => {
  const { user_id, amount, source, received_date, note, status } = req.body;

  if (!user_id || !amount || !source || !received_date) {
    return res.status(400).json({ message: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc" });
  }

  try {
    const income = new Income({
      user_id,
      amount,
      source,
      received_date,
      note,
      status: status || "pending",
    });

    await income.save();
    res.status(201).json({ message: "Thu nh·∫≠p ƒë√£ ƒë∆∞·ª£c l∆∞u", income });
  } catch (err) {
    console.error("‚ùå L·ªói khi l∆∞u thu nh·∫≠p:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß" });
  }
});

// ========================
// GET /api/income/total/:userId
// ========================
const mongoose = require("mongoose");
const ObjectId = mongoose.Types.ObjectId; // L·∫•y ObjectId t·ª´ mongoose

router.get("/Income/total/:userId", async (req, res) => {
  const rawUserId = req.params.userId;
  const userId = rawUserId.trim(); // lo·∫°i b·ªè \n, kho·∫£ng tr·∫Øng th·ª´a

  console.log("üìå Cleaned userId:", userId);

  try {
    const total = await Income.aggregate([
      {
        $match: {
          user_id: new mongoose.Types.ObjectId(userId),
          status: "pending",
        },
      },
      { $group: { _id: null, totalAmount: { $sum: "$amount" } } },
    ]);

    res.json({ total: total[0]?.totalAmount || 0 });
  } catch (err) {
    console.error("‚ùå L·ªói t√≠nh t·ªïng thu nh·∫≠p:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß" });
  }
});

// ========================
// POST /api/withdraw
// ========================
// ƒê∆∞·ªùng d·∫´n n√†y s·∫Ω x·ª≠ l√Ω vi·ªác r√∫t ti·ªÅn
router.post("/Withdraw", async (req, res) => {
  const { user_id, amount, source, note } = req.body;

  if (!user_id || !amount || !source) {
    return res.status(400).json({ message: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc" });
  }
  if (!mongoose.Types.ObjectId.isValid(user_id)) {
    return res.status(400).json({ message: "user_id kh√¥ng h·ª£p l·ªá" });
  }

  try {
    // Ki·ªÉm tra s·ªë d∆∞ t√†i kho·∫£n tr∆∞·ªõc khi r√∫t
    const totalIncomeArr = await Income.aggregate([
      {
        $match: {
          user_id: new mongoose.Types.ObjectId(user_id),
          status: "pending",
        },
      },
      {
        $group: { _id: null, total: { $sum: "$amount" } },
      },
    ]);
    const totalExpenseArr = await Expense.aggregate([
      {
        $match: {
          user_id: new mongoose.Types.ObjectId(user_id),
        },
      },
      {
        $group: { _id: null, total: { $sum: "$amount" } },
      },
    ]);

    const income = totalIncomeArr[0]?.total || 0;
    const expense = totalExpenseArr[0]?.total || 0;
    const currentBalance = income - expense;

    console.log(
      "income:",
      income,
      "expense:",
      expense,
      "currentBalance:",
      currentBalance,
      "amount:",
      amount,
      typeof amount
    );

    if (currentBalance < amount) {
      return res.status(400).json({ message: "S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ r√∫t" });
    }

    // L∆∞u th√¥ng tin giao d·ªãch r√∫t ti·ªÅn
    const withdraw = new Withdraw({
      user_id,
      amount,
      source,
      note,
    });

    await withdraw.save();

    const DEFAULT_CATEGORY_ID = "6649e2c8e2b8f2a1b2c3d4e5"; // Thay b·∫±ng _id th·ª±c t·∫ø c·ªßa category m·∫∑c ƒë·ªãnh

    // Th√™m b·∫£n ghi chi ti√™u (Expense) khi r√∫t ti·ªÅn
    const newExpense = new Expense({
      user_id,
      amount,
      source,
      note,
      created_at: new Date(),
      date: new Date(),
      category_id: DEFAULT_CATEGORY_ID,
    });
    await newExpense.save();

    // C·∫≠p nh·∫≠t s·ªë d∆∞ (tr·ª´ s·ªë ti·ªÅn ƒë√£ r√∫t)
    let remain = amount;
    const incomes = await Income.find({
      user_id: new mongoose.Types.ObjectId(user_id),
      status: "pending",
      amount: { $gt: 0 },
    }).sort({ _id: 1 }); // sort ƒë·ªÉ tr·ª´ t·ª´ kho·∫£n c≈© nh·∫•t

    for (const income of incomes) {
      if (remain <= 0) break;
      const deduct = Math.min(income.amount, remain);
      income.amount -= deduct;
      remain -= deduct;
      await income.save();
    }

    res.status(201).json({ message: "R√∫t ti·ªÅn th√†nh c√¥ng", withdraw });
  } catch (err) {
    console.error("‚ùå L·ªói khi r√∫t ti·ªÅn:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß" });
  }
});

// ========================
router.get("/balance/:userId", async (req, res) => {
  const userId = req.params.userId.trim();

  console.log("userId nh·∫≠n ƒë∆∞·ª£c:", userId);

  try {
    const totalIncome = await Income.aggregate([
      {
        $match: {
          user_id: new mongoose.Types.ObjectId(userId),
          status: "pending",
        },
      },
      {
        $group: {
          _id: null,
          total: { $sum: "$amount" },
        },
      },
    ]);

    const totalExpense = await Expense.aggregate([
      {
        $match: {
          user_id: new mongoose.Types.ObjectId(userId),
        },
      },
      {
        $group: {
          _id: null,
          total: { $sum: "$amount" },
        },
      },
    ]);

    const income = totalIncome[0]?.total || 0;
    const expense = totalExpense[0]?.total || 0;

    res.json({ balance: income - expense });
  } catch (err) {
    console.error("‚ùå L·ªói khi t√≠nh balance:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß" });
  }
});

module.exports = router;
